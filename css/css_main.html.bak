<!DOCTYPE html>
<HTML lang='ru'>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
<link rel='stylesheet' href='css_styles.css' type='text/css'>
<TITLE>CSS</TITLE>
</HEAD>
<BODY>
<h2>CSS. Стили каcкадных таблиц</h2>
<p>Обычный формат определения стиля CSS:</p>
<pre><code><em>&lt;селектор&gt; {
&lt;атрибут стиля 1&gt;: &lt;значение 1&gt;;
&lt;атрибут стиля 2&gt;: &lt;значение 2&gt;;
.
&lt;атрибут стиля n-1&gt;: &lt;значение n-1&gt;;
&lt;атрибут стиля n&gt;: &lt;значение n&gt;
}</em></code></pre>
<p>Основные правила создания стиля</p>
<ul>
	<li>Определение стиля включает селектор и список атрибутов стиля с их значениями.</li>
	<li><em>Селектор</em> используется для привязки стиля к элементу веб-страницы, на который он должен распространять своё действие. Фактически селектор однозначно идентифицирует данный стиль.</li>
	<li>За селектором, через пробел, указывают список атрибутов стиля и их значений, заключённый в фигурные скобки.</li>
	<li>Атрибут стиля (не путать с атрибутом тега!) представляет один из параметров элемента веб-страницы: цвет шрифта, выравнивание текста, величину отступа, толщину рамки и др. Значение атрибута стиля указывают после него через символ <code>:</code> (двоеточие). В некоторых случаях значение атрибута стиля заключают в кавычки.</li>
	<li>Пары &lt;атрибут стиля&gt;:&lt;значение&gt; отделяют друг от друга символом <code>;</code> (точка с запятой).</li>
	<li>Между последней парой &lt;атрибут стиля&gt;:&lt;значение&gt; и закрывающей фигурной скобкой символ <code>;</code> не ставят, иначе некоторые веб-обозреватели могут неправильно обработать определение стиля.</li>
	<li>Определения различных стилей разделяют пробелами или переводами строк.</li>
	<li>Внутри селекторов и имен стилей не должны присутствовать пробелы и переводы строки. Что касается пробелов и переводов строк, поставленных в других местах определения стиля, то браузер их игнорирует. Поэтому мы можем форматировать CSS-код для удобства его чтения, как проделывали это с HTML-кодом.</li>
</ul>
<p>Пример небольшого стиля:</p>
<code>p { color: &num;0000FF }</code>
<p>Разберём его по частям:</p>
<ol>
	<li>p — это селектор. Он представляет собой имя тега &lt;p&gt;.</li>
	<li><code>color</code> — это атрибут стиля. Он задаёт цвет текста.</li>
	<li>&num;0000FF — это значение атрибута стиля <code>color</code>. Оно представляет код синего цвета, записанный в формате RGB. (Подробнее об RGB-коде и его задании мы поговорим <a href=''>позже</a>.)</li>
</ol>
<p>Когда браузер считает описанный стиль, он автоматически применит его ко всем абзацам веб-страницы (тегам &lt;p&gt;). Это, кстати, типичный пример неявной привязки стиля.</p>
<p>Стиль, который мы рассмотрели, называется <em>стилем переопределения тега</em>. В качестве селектора здесь указано имя переопределяемого этим стилем HTML-тега без символов &lt; и &gt;. Селектор можно набирать как прописными, так и строчными буквами; автор предпочитает прописные.</p>
<p>Рассмотрим ещё пару таких стилей.</p>
<p>Вот стиль переопределения тега <code>&lt;em&gt;</code>: <code>em { color: #00FF00; font-weight: bold }</code></p>
<p>Любой текст, помещённый в тег <code>&lt;em&gt;</code>, браузер выведет зелёным полужирным шрифтом. Атрибут стиля <code>font-weight</code> задаёт степень "жирности" шрифта, а его значение <code>bold</code> — полужирный шрифт.</p>
<p>А это стиль переопределения тега <code>&lt;body&gt;</code>:
<p><code>BODY { background-color: &num;000000; color: &num;FFFFFF }</code></p>
<p>Он задаёт для всей веб-страницы белый цвет текста (RGB-код <code>&num;FFFFFF</code>) и чёрный цвет фона (RGB-код <code>#000000</code>). Атрибут стиля <code>background-color</code>, как мы уже поняли, задаёт цвет фона.</p>
<p>А теперь рассмотрим совсем другой стиль:</p> 
<p><code>redtext { color: #FF0000 }</code></p>
<p>Он задаёт красный цвет текста (RGB-код &num;FF0000). Но в качестве селектора используется явно не имя тега — HTML-тега &lt;redtext&gt; не существует.</p>
<p>Это другая разновидность стиля CSS — <em>стилевой класс</em>. Он может быть привязан к любому тегу. В качестве селектора здесь указывают имя стилевого класса, которое его однозначно идентифицирует. Имя стилевого класса должно состоять из букв латинского алфавита, цифр и дефисов, причём начинаться должно с буквы. В определении стилевого класса его имя обязательно предваряется символом точки — это признак того, что определяется именно стилевой класс.</p>
<p>Стилевой класс требует явной привязки к тегу. Для этого служит атрибут <code>class</code>, поддерживаемый практически всеми тегами. В качестве значения этого атрибута указывают имя нужного стилевого класса без символа точки:</p>
<code>&lt;p class='redtext'&gt;Внимание!&lt;/p&gt;</code>
<p>Здесь мы привязали только что созданный стилевой класс <code>redtext</code> к абзацу "Внимание!". В результате этот абзац будет набран красным шрифтом.</p>
<pre><code>attention { color: &num;FF0000;
font-style: italic }</code></pre>
<code>&lt;p&gt;&lt;strong class='attention'&gt;Стилевой класс требует явной привязки атрибутом тега class!&lt;/strong&gt;&lt;/p&gt;</code>
<p>В примере выше мы создали стилевой класс <code>attention</code>, который задаёт красный цвет и курсивное начертание шрифта. (Атрибут стиля font-style задаёт начертание шрифта, а его значение <code>italic</code> как раз делает шрифт курсивным.) Затем мы привязали его к тегу &lt;strong&gt;. В результате содержимое этого тега будет набрано полужирным курсивным шрифтом красного цвета; особую важность и связанную с ним "полужирность" текста задает тег &lt;strong&gt;, а курсивное начертание и красный цвет — стилевой класс <code>attention</code>.</p>
<p>В качестве значения атрибута <code>class</code> можно указать сразу несколько имен стилевых классов, разделив их пробелами. В таком случае действие стилевых классов как бы складывается. (Подробнее о действии на элемент веб-страницы нескольких разных стилей мы поговорим потом.)</p>
<p>А в примере</p>
<pre><code>attention { color: &num;FF0000; font-style: italic }
bigtext { font-size: large }
-&gt;<br>
&lt;p&gt;&lt;strong class='attention bigtext'&gt;Стилевой класс требует явной привязки атрибутом тега class!&lt;/strong&gt;&lt;/p&gt;</code></pre>
<p>мы привязали к тегу <code>&lt;strong&gt;</code> сразу два стилевых класса: <code>attention</code> и <code>bigtext</code>. В результате содержимое этого тега будет выведено полужирным курсивным шрифтом красного цвета и большого размера. (Атрибут стиля <code>font-size</code> указывает размер шрифта, а его значение <code>large</code> — большой размер, сравнимый с размером шрифта, которым выводятся заголовки первого уровня.)</p>
<p>Именованный стиль во многом похож на стилевой класс. Селектором этого стиля также является имя, которое его однозначно идентифицирует, и привязывается он к тегу также явно. А дальше начинаются отличия:</p>
<ul>
<li>В определении именованного стиля перед его именем ставят символ # ("решётка"). Он сообщает браузеру, что перед ним именованный стиль.</li>
<li>Привязку именованного стиля к тегу реализуют через атрибут <code>id</code>, также поддерживаемый практически всеми тегами. В качестве значения этого атрибута указывают имя нужного именованного стиля, уже без символа #.</li>
<li>Значение атрибута тега <code>id</code> должно быть уникальным в пределах веб-страницы.</li>
</ul>
<p>Говоря другими словами, в HTML-коде веб-страницы может присутствовать только один тег с заданным значением атрибута <code>id</code>. Поэтому именованные стили используют, если какой-либо стиль следует привязать к одному-единственному элементу веб-страницы.</p>
<p>В примере:</p>
<pre><code>#bigtext { font-size: large }
.
&lt;p id='bigtext'&gt;Это большой текст.&lt;/p&gt;</code></pre>
<p>абзац "Это большой текст" будет набран крупным шрифтом.</p>
<p>Во всех рассмотренных нами разновидностях стилей был один селектор, с помощью которого и выполнялась привязка. Однако CSS позволяет создавать стили с несколькими селекторами — так называемые <em>комбинированные стили</em>. Такие стили служат для привязки к тегам, удовлетворяющим сразу нескольким условиям. Так, мы можем указать, что комбинированный стиль должен быть привязан к тегу, вложенному в другой тег, или к тегу, для которого указан определенный стилевой класс.</p.>
<p>Правила, которые установлены стандартом CSS при написании селекторов в комбинированном стиле:</p>
<ul>
<li>Селекторами могут выступать имена тегов, имена стилевых классов и имена именованных стилей.</li>
<li>Селекторы перечисляют слева направо и обозначают уровень вложенности соответствующих тегов, который увеличивается при движении слева направо: теги, указанные правее, должны быть вложены в теги, что стоят левее.</li>
<li>Если имя тега скомбинировано с именем стилевого класса или именованного стиля, значит, для данного тега должно быть указано это имя стилевого класса или именованного стиля.</li>
<li>Селекторы разделяют пробелами.</li>
<li>Стиль привязывают к тегу, обозначенному самым правым селектором.</li>
</ul>
<p>Мудреные правила, не так ли?.. Чтобы их понять, рассмотрим несколько примеров. Начнём с самого простого комбинированного стиля:</p>
<code>p em { color: #0000FF }</code>
<ol>
	<li>В качестве селекторов использованы имена тегов &lt;p&gt; и &lt;em&gt;.</li>
	<li>Сначала идет тег &lt;p&gt;, за ним — тег &lt;em&gt;. Значит, тег &lt;em&gt; должен быть вложен в тег &lt;p&gt;.</li>
	<li>Стиль будет привязан к тегу &lt;em&gt;.
<pre><code>&lt;p&gt;&lt;em&gt;Этот текст&lt;/em&gt; станет синим.&lt;/p&gt;
&lt;p&gt;А этот не станет.&lt;/p&gt;<
&lt;p&gt;&lt;strong&gt;Этот&lt;/strong&gt; — тоже.&lt;/p&gt;</code></pre></li>
</ol>
<p>Здесь слова "Этот текст" будут набраны синим шрифтом.</p>
<p>Вот ещё один комбинированный стиль:</p>
<code>p.mini { color: #FF0000; font-size: smaller }</code>
<p>Имя тега &lt;p&gt; скомбинировано с именем стилевого класса <code>mini</code>. Значит, данный стиль будет применен к любому тегу &lt;p&gt;, для которого указано имя стилевого класса <code>mini</code>. (Значение <code>smaller</code> атрибута стиля <code>font-size</code> задаёт уменьшенный размер шрифта.)</p>
<code>&lt;p CLASS="mini"&gt;Маленький красный текстик.&lt;/p&gt;</code>
<p>И последний пример комбинированного стиля:</p>
<code>p.sel &lt;strong&gt; { color: #FF0000 }</code>
<p>Этот стиль будет применен к тегу &lt;strong&gt;, находящемуся внутри тега &lt;p&gt;, к которому привязан стилевой класс sel.</p>
<code>&lt;p CLASS="sel"&gt;&lt;strong&gt;Этот&lt;/strong&gt; текст станет красным.&lt;/p&gt;</code>
<p>В данном примере слово "Этот" будет выделено красным цветом.</p>
<p>Стандарт CSS позволяет определить сразу несколько одинаковых стилей, перечислив их селекторы через запятую:</p>
<code>H1, redtext, p em &lt;strong&gt; { color: #FF0000 }</code>
<p>Здесь мы создали сразу три одинаковых стиля: стиль переопределения тега &lt;H1&gt;, стилевой класс <code>redtext</code> и комбинированный стиль <code>p em</code>. Все они задают красный цвет шрифта.</p>
<p>Все четыре рассмотренные нами разновидности стилей CSS могут присутствовать только в таблицах стилей. Если указать их в HTML-коде веб-страницы, они, скорее всего, будут проигнорированы.</p>
<p>Стили последней — пятой — разновидности указывают прямо в HTML-коде Web-страницы, в соответствующем теге. Это встроенные стили. В сплоченном семействе стилей они стоят особняком.</p>
<ul>
	<li>Они не имеют селектора, т. к. ставятся прямо в нужный тег. Селектор в данном случае просто не нужен.<li>
	<li>В них отсутствуют фигурные скобки, поскольку нет нужды отделять список атрибутов стиля от селектора, которого нет.</li>
	<li>Встроенный стиль может быть привязан только к одному тегу — тому, в котором он находится.</li>
</ul>
<p>Определение встроенного стиля указывают в качестве значения атрибута <code>style</code> нужного тега, который поддерживается практически всеми тегами:</p>
<code>&lt;p style='font-size: smaller; font-style: italic'&gt;Маленький курсивчик.&lt;/p&gt;</code>
<p>Ранее мы упомянули, что в некоторых случаях значение атрибута стиля нужно заключать в кавычки. Но в определении встроенного стиля вместо кавычек используются апострофы. Встроенные стили применяются сейчас довольно редко, т. к. нарушают требование концепции Web 2.0 разделять содержимое и представление веб-страниц. В основном их применяют для привязки стилей к одному-единственному элементу веб-страницы (очень редко) и во время экспериментов со стилями.</p>
<p>Позже я добавлю сюда ещё одну разновидность стилей CSS. А пока что закончим с ними и приступим к рассмотрению таблиц стилей.</p>

</ol>
</BODY>
</HTML>